# This is the configuration file for default setttings the application.
# Connection password credentials and secret keys should be kept out of this file.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.

app {
  name.uppercase = "APP_NAME"
  name.id = "app-name"

  # Override this locally to use entirely different webgroups from prod
  webgroup.prefix = "in-"${app.name.id}"-"
}

memcached.consistentHashing = true

play {
  i18n.langs = [ "en" ]

  http {
    secret.key = "changeme"

    # Trust all internal IP addresses for X-Forwarded
    forwarded.trustedProxies = [ "137.205.0.0/16", "10.0.0.0/8", "::1", "127.0.0.1" ]

    flash.sameSite = strict
  }

  allowGlobalApplication = false

  evolutions {
    enabled = true
    autoApply = true
  }

  server {
    http {
      port = 8080
      port = ${?http.port}
    }

    akka {
      default-host-header = ${domain}
    }
  }

  modules {
    enabled += system.AppModule
    enabled += system.ThreadsModule
    enabled += warwick.sso.SSOClientModule
    disabled += org.databrary.PlayLogbackAccessModule

    disabled += play.api.cache.EhCacheModule
    enabled += com.github.mumoshu.play2.memcached.MemcachedModule

    cache {
      defaultCache = default
      bindCaches = ["play"]
    }
  }

  filters {
    // Access logging filter must be first; CSRF same site cookie filter must be before (default) CSRF filter
    enabled = [org.databrary.PlayLogbackAccessFilter, system.CSRFSameSiteCookieFilter] ${play.filters.enabled}
    enabled += play.filters.csp.CSPFilter
    enabled += system.AdditionalSecurityHeadersFilter
    enabled += system.CacheDefaultHeadersFilter
    enabled += warwick.core.timing.ServerTimingFilter
    enabled += play.filters.gzip.GzipFilter

    headers {
      reportTo = """{"endpoints":[{"url":""""${play.filters.csp.directives.report-uri}""""}],"group":""""${play.filters.csp.directives.report-to}"""","max_age":31557600}"""
      featurePolicy = ${featurePolicy}
      referrerPolicy = "strict-origin-when-cross-origin"

      # This must contain no-cache in order for CSRF cookies to be set
      # https://warwick.slack.com/archives/GC024AH3L/p1535127425000100
      cacheControl = "no-cache"
    }

    hosts {
      allowed += ${domain}
      allowed += ".lnx.warwick.ac.uk:8080"
      allowed += ".lnx.warwick.ac.uk:8443"
      allowed += "127.0.0.1:8080"
      allowed += "127.0.0.1:8443"
      allowed += "" // HTTP/1.0 requests
    }

    csrf {
      cookie {
        name = "__Host-"${app.name.uppercase}"-CSRF"
        secure = true
        httpOnly = true
        sameSite = strict
      }
    }

    csp {
      directives {
        default-src = "'none'" // Deny by default, require everything to be explicitly set
        img-src = "'self' data:"
        style-src = "'self' 'report-sample' https://fonts.googleapis.com"
        font-src = "'self' https://fonts.gstatic.com"
        script-src = "'self' 'report-sample'"
        frame-src = "'self' https://websignon.warwick.ac.uk https://my.warwick.ac.uk"
        connect-src = "'self' https://my.warwick.ac.uk"
        object-src = "'none'"
        form-action = "'self'"
        frame-ancestors = "'none'"
        manifest-src = "'self'"
        report-uri = "https://warwick.report-uri.com/r/d/csp/enforce"
        report-to = "csp"
      }
    }
  }
}

// This is extended above
featurePolicy = "accelerometer 'self' https://my.warwick.ac.uk"
featurePolicy = ${featurePolicy}"; camera 'none'"
featurePolicy = ${featurePolicy}"; geolocation 'none'"
featurePolicy = ${featurePolicy}"; gyroscope 'self' https://my.warwick.ac.uk"
featurePolicy = ${featurePolicy}"; magnetometer 'none'"
featurePolicy = ${featurePolicy}"; microphone 'none'"
featurePolicy = ${featurePolicy}"; payment 'none'"
featurePolicy = ${featurePolicy}"; usb 'none'"

akka {
  # Funnel Akka logging through SLF4J like everything else
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"

  actor {
    default-dispatcher = {
      fork-join-executor {
        parallelism-min = 16
      }
    }
  }
}

slick.dbs.default {
  profile = "domain.ExtendedPostgresProfile$"
  db {
    driver = "org.postgresql.Driver"
    numThreads = 10
    connectionTimeout = 30000
  }
}

sso-client {
  httpbasic {
    allow = true
  }
  mode = new
  cluster {
    enabled = true
    db = default
  }
  shire {
    sscookie {
      name = "SSO-SSC-"${app.name.uppercase}
      domain = ""
      path = "/"
      secure = true
    }
    location = "https://"${domain}"/sso/acs"
    providerid = "urn:"${domain}":"${app.name.id}":service"
  }
  logout = "https://"${domain}"/sso/logout"
  role-groups {
    sysadmin = ${app.webgroup.prefix}"sysadmins"
    masquerader = ${sso-client.masquerade.group}
  }
  masquerade {
    group = ${app.webgroup.prefix}"masqueraders"
  }
}

# Enable logback-access
logbackaccess.config.resource=logback-access.xml

threads {
  userLookup {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      fixed-pool-size = 50
    }
  }
}
